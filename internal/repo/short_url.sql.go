// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: short_url.sql

package repo

import (
	"context"
)

const createShortURL = `-- name: CreateShortURL :one
INSERT INTO short_url (
  slug, target_url
) VALUES (
  $1, $2
)
RETURNING id, slug, target_url, created_at, updated_at
`

type CreateShortURLParams struct {
	Slug      string
	TargetUrl string
}

func (q *Queries) CreateShortURL(ctx context.Context, arg CreateShortURLParams) (ShortUrl, error) {
	row := q.db.QueryRow(ctx, createShortURL, arg.Slug, arg.TargetUrl)
	var i ShortUrl
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.TargetUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShortURL = `-- name: GetShortURL :one
SELECT id, slug, target_url, created_at, updated_at FROM short_url
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetShortURL(ctx context.Context, id int64) (ShortUrl, error) {
	row := q.db.QueryRow(ctx, getShortURL, id)
	var i ShortUrl
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.TargetUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShortURLBySlug = `-- name: GetShortURLBySlug :one
SELECT id, slug, target_url, created_at, updated_at FROM short_url
WHERE slug = $1 LIMIT 1
`

func (q *Queries) GetShortURLBySlug(ctx context.Context, slug string) (ShortUrl, error) {
	row := q.db.QueryRow(ctx, getShortURLBySlug, slug)
	var i ShortUrl
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.TargetUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
